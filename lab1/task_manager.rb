require 'json'
require 'yaml'

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
def add_task(tasks, title, categories, priority, due_date, completed = false)
  tasks[title.to_sym] = {
    categories: categories,
    priority: priority,
    due_date: due_date,
    completed: completed
  }
end

# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
def edit_task(tasks, title, new_categories: nil, new_priority: nil, new_due_date: nil, new_completed: nil)
  return unless tasks.key?(title.to_sym)

  task = tasks[title.to_sym]
  task[:categories] = new_categories unless new_categories.nil?
  task[:priority] = new_priority unless new_priority.nil?
  task[:due_date] = new_due_date unless new_due_date.nil?
  task[:completed] = new_completed unless new_completed.nil?
end

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
def delete_task(tasks, title)
  tasks.delete(title.to_sym)
end

# –ü–æ—à—É–∫ –∑–∞–≤–¥–∞–Ω—å –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º
def search_tasks(tasks, keyword)
  tasks.select do |title, details|
    title.to_s.downcase.include?(keyword.downcase) ||
    details[:categories].any? { |cat| cat.downcase.include?(keyword.downcase) } ||
    details[:priority].downcase.include?(keyword.downcase)
  end
end

# –í–∏–≤—ñ–¥ —É—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å
def output_tasks(tasks)
  tasks.each do |title, details|
    puts "\n–ó–∞–≤–¥–∞–Ω–Ω—è: #{title}"
    puts "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: #{details[:categories].join(', ')}"
    puts "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: #{details[:priority]}"
    puts "–¢–µ—Ä–º—ñ–Ω: #{details[:due_date]}"
    puts "–í–∏–∫–æ–Ω–∞–Ω–æ: #{details[:completed] ? '–¢–∞–∫' : '–ù—ñ'}"
  end
end

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª
def save_to_json(tasks, filename)
  File.write(filename, JSON.pretty_generate(tasks))
end

def load_from_json(filename)
  JSON.parse(File.read(filename), symbolize_names: true) rescue {}
end

def save_to_yaml(tasks, filename)
  File.write(filename, tasks.to_yaml)
end

def load_from_yaml(filename)
  YAML.load_file(filename, symbolize_names: true) rescue {}
end

# –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
def main
  tasks = load_from_json("tasks.json")

  add_task(tasks, "–ö—É–ø–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏", ["–ü–æ–∫—É–ø–∫–∏", "–û—Å–æ–±–∏—Å—Ç—ñ"], "–í–∏—Å–æ–∫–∏–π", "2024-02-28")
  add_task(tasks, "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–≤—ñ—Ç", ["–†–æ–±–æ—Ç–∞", "–î–æ–∫—É–º–µ–Ω—Ç–∏"], "–°–µ—Ä–µ–¥–Ω—ñ–π", "2024-03-01")

  edit_task(tasks, "–ö—É–ø–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏", new_completed: true, new_categories: ["–ü–æ–∫—É–ø–∫–∏"])

  delete_task(tasks, "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–≤—ñ—Ç")

  add_task(tasks, "–ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –∫–Ω–∏–≥—É", ["–û—Å–æ–±–∏—Å—Ç—ñ", "–°–∞–º–æ—Ä–æ–∑–≤–∏—Ç–æ–∫"], "–ù–∏–∑—å–∫–∏–π", "2024-04-15")

  puts "\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∑–∞ '–æ—Å–æ–±–∏—Å—Ç—ñ':"
  puts search_tasks(tasks, "–æ—Å–æ–±–∏—Å—Ç—ñ")

  puts "\nüìã –ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å:"
  output_tasks(tasks)

  save_to_json(tasks, "tasks.json")
  save_to_yaml(tasks, "tasks.yaml")
end

main if __FILE__ == $0
